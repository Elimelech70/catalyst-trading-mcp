# Name of Application: Catalyst Trading System
# Name of file: docker-compose.yml (COMPLETE NEWS SERVICE SECTION)
# Version: 1.0.3
# Last Updated: 2025-10-06
# Purpose: Add explicit healthcheck to news service in docker-compose

# REVISION HISTORY:
# v1.0.3 (2025-10-06) - Added healthcheck override in docker-compose
#                     - Increased start_period to 60s for database initialization

# Description:
# The Dockerfile has a healthcheck but with too short start_period (5s)
# Override it in docker-compose.yml with longer start_period (60s)

version: '3.8'

services:
  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: catalyst-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - catalyst-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # News Service - WITH HEALTHCHECK OVERRIDE
  news:
    build:
      context: ./services/news
      dockerfile: Dockerfile
    container_name: catalyst-news
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NEWS_API_KEY: ${NEWS_API_KEY}
      BENZINGA_API_KEY: ${BENZINGA_API_KEY:-}
    ports:
      - "5008:5008"
    volumes:
      - ./services/news/config:/app/config:ro
      - news_logs:/app/logs
    networks:
      - catalyst-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    # ADD THIS HEALTHCHECK SECTION ↓
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5008/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      start_period: 60s  # ← KEY FIX: Give it time to init database
      retries: 3

  # Scanner Service
  scanner:
    build:
      context: ./services/scanner
      dockerfile: Dockerfile
    container_name: catalyst-scanner
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NEWS_SERVICE_URL: http://news:5008
    ports:
      - "5001:5001"
    volumes:
      - scanner_logs:/app/logs
    networks:
      - catalyst-network
    depends_on:
      redis:
        condition: service_healthy
      news:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5001/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      start_period: 45s
      retries: 3

volumes:
  redis_data:
  news_logs:
  scanner_logs:

networks:
  catalyst-network:
    driver: bridge
