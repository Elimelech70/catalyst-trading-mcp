# Name of Application: Catalyst Trading System
# Name of file: docker-compose.yml
# Version: 5.0.1
# Last Updated: 2025-09-19
# Purpose: Docker Compose configuration with REST API architecture


# REVISION HISTORY:
# v5.1.0 (2025-09-20)
# Added Technical Analysis Service
# Was missing
# 
# v5.0.0 (2025-09-19) - Migrated to REST API architecture
# - REMOVED database-service (MCP pattern was incorrect)
# - Services now connect directly to DigitalOcean PostgreSQL
# - Removed DATABASE_SERVICE_URL from all services
# - Services will use REST APIs for inter-service communication
# v4.3.0 (2025-09-19) - Added Database MCP Service (now removed - wrong pattern)
# v4.2.0 (2025-09-13) - Fixed to use DigitalOcean Managed PostgreSQL
# v4.1.0 (2025-08-31) - Previous version with local PostgreSQL

# Description of Service:
# Complete docker-compose setup for Catalyst Trading MCP system
# using DigitalOcean Managed PostgreSQL with direct connections
# MCP is used ONLY for orchestration/Claude interface

version: '3.8'

services:
  # Cache Service (Local Redis)
  redis:
    image: redis:7-alpine
    container_name: catalyst-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Orchestration Service (MCP-enabled for Claude)
  orchestration:
    build:
      context: ./services/orchestration
      dockerfile: Dockerfile
    container_name: catalyst-orchestration
    env_file: 
      - ./.env
    environment:
      # Direct database connection
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      MCP_MODE: production
      SERVICE_PORT: 5000
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - ./logs/orchestration:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scanner Service (REST API)
  scanner:
    build:
      context: ./services/scanner
      dockerfile: Dockerfile
    container_name: catalyst-scanner
    env_file: 
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      NEWS_URL: http://news:5008
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      ALPACA_BASE_URL: ${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      SERVICE_PORT: 5001
      INITIAL_UNIVERSE_SIZE: ${INITIAL_UNIVERSE_SIZE:-200}
      TOP_TRACKING_SIZE: ${TOP_TRACKING_SIZE:-100}
      CATALYST_FILTER_SIZE: ${CATALYST_FILTER_SIZE:-50}
      FINAL_SELECTION_SIZE: ${FINAL_SELECTION_SIZE:-5}
    depends_on:
      redis:
        condition: service_healthy
      orchestration:
        condition: service_started
    ports:
      - "5001:5001"
    volumes:
      - ./logs/scanner:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # News Intelligence Service (REST API)
  news:
    build:
      context: ./services/news
      dockerfile: Dockerfile
    container_name: catalyst-news
    env_file: 
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5008
      NEWS_API_KEY: ${NEWS_API_KEY}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5008:5008"
    volumes:
      - ./logs/news:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pattern Detection Service (REST API)
  pattern:
    build:
      context: ./services/pattern
      dockerfile: Dockerfile
    container_name: catalyst-pattern
    env_file: 
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5002
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5002:5002"
    volumes:
      - ./logs/pattern:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Risk Manager Service (REST API)
  risk-manager:
    build:
      context: ./services/risk-manager
      dockerfile: Dockerfile
    container_name: catalyst-risk
    env_file: 
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5004
      MAX_DAILY_LOSS: ${MAX_DAILY_LOSS:-2000}
      MAX_POSITION_RISK: ${MAX_POSITION_RISK:-0.02}
      POSITION_SIZE_MULTIPLIER: ${POSITION_SIZE_MULTIPLIER:-1.0}
      RISK_FREE_RATE: ${RISK_FREE_RATE:-0.05}
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5004:5004"
    volumes:
      - ./logs/risk:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Technical Analysis Service (REST API)
  technical:
    build:
      context: ./services/technical
      dockerfile: Dockerfile
    container_name: catalyst-technical
    env_file: 
      - ./.env  # Fixed path (was ./config/.env)
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5003
      # Technical Analysis Configuration
      RSI_PERIOD: ${RSI_PERIOD:-14}
      MACD_FAST: ${MACD_FAST:-12}
      MACD_SLOW: ${MACD_SLOW:-26}
      MACD_SIGNAL: ${MACD_SIGNAL:-9}
      BB_PERIOD: ${BB_PERIOD:-20}
      BB_STD: ${BB_STD:-2.0}
      SMA_SHORT: ${SMA_SHORT:-20}
      SMA_LONG: ${SMA_LONG:-50}
      EMA_SHORT: ${EMA_SHORT:-9}
      EMA_LONG: ${EMA_LONG:-21}
      ATR_PERIOD: ${ATR_PERIOD:-14}
      ADX_PERIOD: ${ADX_PERIOD:-14}
      STOCH_PERIOD: ${STOCH_PERIOD:-14}
      # Signal Thresholds
      RSI_OVERSOLD: ${RSI_OVERSOLD:-30}
      RSI_OVERBOUGHT: ${RSI_OVERBOUGHT:-70}
      MACD_THRESHOLD: ${MACD_THRESHOLD:-0}
      ADX_TREND_STRENGTH: ${ADX_TREND_STRENGTH:-25}
      TECHNICAL_LOOKBACK_PERIODS: ${TECHNICAL_LOOKBACK_PERIODS:-100}
      # Risk Parameters
      STOP_LOSS_ATR: ${STOP_LOSS_ATR:-2.0}
      TAKE_PROFIT_ATR: ${TAKE_PROFIT_ATR:-3.0}
    depends_on:
      redis:
        condition: service_healthy
      orchestration:
        condition: service_started
    ports:
      - "5003:5003"
    volumes:
      - ./logs/technical:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trading Execution Service (REST API)
  trading:
    build:
      context: ./services/trading
      dockerfile: Dockerfile
    container_name: catalyst-trading
    env_file: 
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      ALPACA_BASE_URL: ${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      SERVICE_PORT: 5005
      TRADING_ENABLED: ${TRADING_ENABLED:-true}
      MAX_POSITIONS: ${MAX_POSITIONS:-5}
      MAX_POSITION_SIZE: ${MAX_POSITION_SIZE:-1000}
      MIN_SIGNAL_CONFIDENCE: ${MIN_SIGNAL_CONFIDENCE:-60}
      STOP_LOSS_PCT: ${STOP_LOSS_PCT:-2.0}
      TAKE_PROFIT_PCT: ${TAKE_PROFIT_PCT:-4.0}
    depends_on:
      redis:
        condition: service_healthy
      risk-manager:
        condition: service_started
      orchestration:
        condition: service_started
    ports:
      - "5005:5005"
    volumes:
      - ./logs/trading:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reporting & Analytics Service (REST API)
  reporting:
    build:
      context: ./services/reporting
      dockerfile: Dockerfile
    container_name: catalyst-reporting
    env_file: 
      - ./.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5009
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      EMAIL_ALERTS_ENABLED: ${EMAIL_ALERTS_ENABLED:-false}
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5009:5009"
    volumes:
      - ./logs/reporting:/app/logs
      - ./reports:/app/reports
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes (only Redis data, PostgreSQL is cloud-managed)
volumes:
  redis_data:
    driver: local

# Networks
networks:
  default:
    name: catalyst-network
    driver: bridge