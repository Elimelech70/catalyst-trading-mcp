# Name of Application: Catalyst Trading System
# Name of file: docker-compose.yml
# Version: 1.0.4
# Last Updated: 2025-10-07
# Purpose: Complete docker-compose with News, Scanner, and Trading services

# REVISION HISTORY:
# v1.0.4 (2025-10-07) - Added Trading Service with proper configuration
#                     - Added health checks for all services
#                     - Added proper dependencies and volumes
# v1.0.3 (2025-10-06) - Added healthcheck override in docker-compose
#                     - Increased start_period to 60s for database initialization

# Description:
# Complete docker-compose configuration for running News, Scanner, and Trading services
# with normalized schema v5.0 support

version: '3.8'

services:
  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: catalyst-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - catalyst-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # News Service - v5.2.1 with normalized schema
  news:
    build:
      context: ./services/news
      dockerfile: Dockerfile
    container_name: catalyst-news
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NEWS_API_KEY: ${NEWS_API_KEY}
      BENZINGA_API_KEY: ${BENZINGA_API_KEY:-}
      SERVICE_PORT: 5008
    ports:
      - "5008:5008"
    volumes:
      - ./services/news/config:/app/config:ro
      - news_logs:/app/logs
    networks:
      - catalyst-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5008/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  # Scanner Service - v5.3.0 with normalized schema
  scanner:
    build:
      context: ./services/scanner
      dockerfile: Dockerfile
    container_name: catalyst-scanner
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NEWS_SERVICE_URL: http://news:5008
      SERVICE_PORT: 5001
    ports:
      - "5001:5001"
    volumes:
      - scanner_logs:/app/logs
    networks:
      - catalyst-network
    depends_on:
      redis:
        condition: service_healthy
      news:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5001/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      start_period: 45s
      retries: 3

  # Trading Service - v5.0.0 with normalized schema
  trading:
    build:
      context: ./services/trading
      dockerfile: Dockerfile
    container_name: catalyst-trading
    environment:
      DATABASE_URL: ${DATABASE_URL}
      ALPACA_API_KEY: ${ALPACA_API_KEY:-paper_key}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY:-paper_secret}
      ALPACA_BASE_URL: ${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      SERVICE_PORT: 5002
      REDIS_URL: redis://redis:6379/0
      SCANNER_SERVICE_URL: http://scanner:5001
      NEWS_SERVICE_URL: http://news:5008
    ports:
      - "5002:5002"
    volumes:
      - trading_logs:/app/logs
      - ./services/trading/config:/app/config:ro
    networks:
      - catalyst-network
    depends_on:
      redis:
        condition: service_healthy
      news:
        condition: service_healthy
      scanner:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5002/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      start_period: 45s
      retries: 3

  # Technical Service - v5.0.0 (Uncomment when ready to deploy)
  # technical:
  #   build:
  #     context: ./services/technical
  #     dockerfile: Dockerfile
  #   container_name: catalyst-technical
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     SERVICE_PORT: 5003
  #   ports:
  #     - "5003:5003"
  #   volumes:
  #     - technical_logs:/app/logs
  #   networks:
  #     - catalyst-network
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5003/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
  #     interval: 30s
  #     timeout: 10s
  #     start_period: 30s
  #     retries: 3

  # Pattern Service - v5.0.0 (Uncomment when ready to deploy)
  # pattern:
  #   build:
  #     context: ./services/pattern
  #     dockerfile: Dockerfile
  #   container_name: catalyst-pattern
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     SERVICE_PORT: 5004
  #   ports:
  #     - "5004:5004"
  #   volumes:
  #     - pattern_logs:/app/logs
  #   networks:
  #     - catalyst-network
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5004/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
  #     interval: 30s
  #     timeout: 10s
  #     start_period: 30s
  #     retries: 3

  # Risk Manager - v5.0.0 (Uncomment when migrated)
  # risk:
  #   build:
  #     context: ./services/risk
  #     dockerfile: Dockerfile
  #   container_name: catalyst-risk
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     SERVICE_PORT: 5005
  #   ports:
  #     - "5005:5005"
  #   volumes:
  #     - risk_logs:/app/logs
  #   networks:
  #     - catalyst-network
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5005/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
  #     interval: 30s
  #     timeout: 10s
  #     start_period: 30s
  #     retries: 3

  # Reporting Service - v5.0.0 (Uncomment when ready to deploy)
  # reporting:
  #   build:
  #     context: ./services/reporting
  #     dockerfile: Dockerfile
  #   container_name: catalyst-reporting
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     SERVICE_PORT: 5006
  #   ports:
  #     - "5006:5006"
  #   volumes:
  #     - reporting_logs:/app/logs
  #   networks:
  #     - catalyst-network
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5006/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
  #     interval: 30s
  #     timeout: 10s
  #     start_period: 30s
  #     retries: 3

  # Orchestration Service - MCP (Uncomment when migrated)
  # orchestration:
  #   build:
  #     context: ./services/orchestration
  #     dockerfile: Dockerfile
  #   container_name: catalyst-orchestration
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     SERVICE_PORT: 5000
  #     SCANNER_URL: http://scanner:5001
  #     TRADING_URL: http://trading:5002
  #     TECHNICAL_URL: http://technical:5003
  #     PATTERN_URL: http://pattern:5004
  #     RISK_URL: http://risk:5005
  #     REPORTING_URL: http://reporting:5006
  #     NEWS_URL: http://news:5008
  #   ports:
  #     - "5000:5000"
  #   volumes:
  #     - orchestration_logs:/app/logs
  #   networks:
  #     - catalyst-network
  #   depends_on:
  #     news:
  #       condition: service_healthy
  #     scanner:
  #       condition: service_healthy
  #     trading:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5000/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
  #     interval: 30s
  #     timeout: 10s
  #     start_period: 60s
  #     retries: 3

volumes:
  redis_data:
  news_logs:
  scanner_logs:
  trading_logs:
  technical_logs:
  pattern_logs:
  risk_logs:
  reporting_logs:
  orchestration_logs:

networks:
  catalyst-network:
    driver: bridge

# Technical Service - v5.0.0 with normalized schema
  technical:
    build:
      context: ./services/technical
      dockerfile: Dockerfile
    container_name: catalyst-technical
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SERVICE_PORT: 5003
      REDIS_URL: redis://redis:6379/0
    ports:
      - "5003:5003"
    volumes:
      - technical_logs:/app/logs
    networks:
      - catalyst-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:5003/health', timeout=5); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      start_period: 45s
      retries: 3

  