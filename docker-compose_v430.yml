# Name of Application: Catalyst Trading System
# Name of file: docker-compose.yml
# Version: 4.3.0
# Last Updated: 2025-09-19
# Purpose: Docker Compose configuration with Database MCP Service

# REVISION HISTORY:
# v4.3.0 (2025-09-19) - Added Database MCP Service
# - Added database-service on port 5010
# - Updated all services to depend on database-service
# - Services now use MCP Database Client instead of direct connections
# v4.2.0 (2025-09-13) - Fixed to use DigitalOcean Managed PostgreSQL
# - Removed local PostgreSQL container
# - All services use cloud DATABASE_URL from .env
# - Fixed environment variable references
# - Proper health checks and dependencies
# v4.1.0 (2025-08-31) - Previous version with local PostgreSQL

# Description of Service:
# Complete docker-compose setup for Catalyst Trading MCP system
# using DigitalOcean Managed PostgreSQL cloud service with MCP Database Service layer

version: '3.8'

services:
  # Cache Service (Local Redis)
  redis:
    image: redis:7-alpine
    container_name: catalyst-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Database MCP Service (NEW - v4.3.0)
  database-service:
    build:
      context: .
      dockerfile: services/database/Dockerfile
    container_name: catalyst-database-service
    env_file: 
      - ./config/.env
    environment:
      # DigitalOcean Managed PostgreSQL connection
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT:-25060}
      DATABASE_NAME: ${DATABASE_NAME:-catalyst_trading}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_SSLMODE: ${DATABASE_SSLMODE:-require}
      # Redis cache connection
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      # Service configuration
      SERVICE_NAME: database-mcp-service
      SERVICE_PORT: 5010
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYTHONUNBUFFERED: 1
      MCP_TRANSPORT: websocket
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5010:5010"
    volumes:
      - ./logs/database:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio, aiohttp; asyncio.run(aiohttp.ClientSession().get('http://localhost:5010/health'))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Orchestration Service (v41)
  orchestration:
    build:
      context: ./services/orchestration
      dockerfile: Dockerfile
    container_name: catalyst-orchestration
    env_file: 
      - ./config/.env
    environment:
      # Database connection via MCP Service
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_SERVICE_URL: ws://database-service:5010
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      MCP_MODE: production
      SERVICE_PORT: 5000
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      database-service:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - ./logs/orchestration:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scanner Service (v41)
  scanner:
    build:
      context: ./services/scanner
      dockerfile: Dockerfile
    container_name: catalyst-scanner
    env_file: 
      - ./config/.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_SERVICE_URL: ws://database-service:5010
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      NEWS_URL: http://news:5008
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      ALPACA_BASE_URL: ${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      SERVICE_PORT: 5001
      INITIAL_UNIVERSE_SIZE: ${INITIAL_UNIVERSE_SIZE:-200}
      TOP_TRACKING_SIZE: ${TOP_TRACKING_SIZE:-100}
      CATALYST_FILTER_SIZE: ${CATALYST_FILTER_SIZE:-50}
      FINAL_SELECTION_SIZE: ${FINAL_SELECTION_SIZE:-5}
    depends_on:
      redis:
        condition: service_healthy
      database-service:
        condition: service_healthy
      orchestration:
        condition: service_started
    ports:
      - "5001:5001"
    volumes:
      - ./logs/scanner:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # News Scanner Service
  news:
    build:
      context: ./services/news
      dockerfile: Dockerfile
    container_name: catalyst-news
    env_file: 
      - ./config/.env    
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_SERVICE_URL: ws://database-service:5010
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5008
      NEWS_API_KEY: ${NEWS_API_KEY}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      database-service:
        condition: service_healthy
    ports:
      - "5008:5008"
    volumes:
      - ./logs/news:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pattern Detection Service
  pattern:
    build:
      context: ./services/pattern
      dockerfile: Dockerfile
    container_name: catalyst-pattern
    env_file: 
      - ./config/.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_SERVICE_URL: ws://database-service:5010
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5002
    depends_on:
      redis:
        condition: service_healthy
      database-service:
        condition: service_healthy
    ports:
      - "5002:5002"
    volumes:
      - ./logs/pattern:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Risk Manager Service
  risk-manager:
    build:
      context: ./services/risk-manager
      dockerfile: Dockerfile
    container_name: catalyst-risk
    env_file: 
      - ./config/.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_SERVICE_URL: ws://database-service:5010
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5004
      MAX_DAILY_LOSS: ${MAX_DAILY_LOSS:-2000}
      MAX_POSITION_RISK: ${MAX_POSITION_RISK:-0.02}
      POSITION_SIZE_MULTIPLIER: ${POSITION_SIZE_MULTIPLIER:-1.0}
      RISK_FREE_RATE: ${RISK_FREE_RATE:-0.05}
    depends_on:
      redis:
        condition: service_healthy
      database-service:
        condition: service_healthy
    ports:
      - "5004:5004"
    volumes:
      - ./logs/risk:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trading Service
  trading:
    build:
      context: ./services/trading
      dockerfile: Dockerfile
    container_name: catalyst-trading
    env_file: 
      - ./config/.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_SERVICE_URL: ws://database-service:5010
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_SECRET_KEY: ${ALPACA_SECRET_KEY}
      ALPACA_BASE_URL: ${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      SERVICE_PORT: 5005
      TRADING_ENABLED: ${TRADING_ENABLED:-true}
      MAX_POSITIONS: ${MAX_POSITIONS:-5}
      MAX_POSITION_SIZE: ${MAX_POSITION_SIZE:-1000}
      MIN_SIGNAL_CONFIDENCE: ${MIN_SIGNAL_CONFIDENCE:-60}
      STOP_LOSS_PCT: ${STOP_LOSS_PCT:-2.0}
      TAKE_PROFIT_PCT: ${TAKE_PROFIT_PCT:-4.0}
    depends_on:
      redis:
        condition: service_healthy
      database-service:
        condition: service_healthy
      risk-manager:
        condition: service_started
      orchestration:
        condition: service_started
    ports:
      - "5005:5005"
    volumes:
      - ./logs/trading:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reporting Service
  reporting:
    build:
      context: ./services/reporting
      dockerfile: Dockerfile
    container_name: catalyst-reporting
    env_file: 
      - ./config/.env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_SERVICE_URL: ws://database-service:5010
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCatalyst2025!SecureCache}@redis:6379/0
      SERVICE_PORT: 5009
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      EMAIL_ALERTS_ENABLED: ${EMAIL_ALERTS_ENABLED:-false}
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
    depends_on:
      redis:
        condition: service_healthy
      database-service:
        condition: service_healthy
    ports:
      - "5009:5009"
    volumes:
      - ./logs/reporting:/app/logs
      - ./reports:/app/reports
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes (only Redis data, no PostgreSQL as it's cloud-managed)
volumes:
  redis_data:
    driver: local

# Networks
networks:
  default:
    name: catalyst-network
    driver: bridge